===========================
How to Use say_my_name.py
===========================

This module defines a function ``say_my_name(first_name, last_name="")``.

Usage
=====

``say_my_name(...)`` prints the full name using the provided first name and last name.

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("John", "Doe")
    My name is John Doe

::

    >>> say_my_name("Jane")
    My name is Jane 

::

    >>> say_my_name("John", "")
    My name is John

Error Cases
===========

Argument Type Checks
====================

``say_my_name()`` raises a TypeError if the `first_name` or `last_name` arguments are not strings.

::

    >>> say_my_name(123, "Doe")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("John", 456)
    Traceback (most recent call last):
    TypeError: last_name must be a string

::

    >>> say_my_name("Jane", 3.1415)
    Traceback (most recent call last):
    TypeError: last_name must be a string

::

    >>> say_my_name(3.1415, "Doe")
    Traceback (most recent call last):
    TypeError: first_name must be a string

Missing Arguments
=================

``say_my_name()`` expects at least the `first_name` argument. If it is not provided, a TypeError is raised:

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

::

    >>> say_my_name(last_name="Doe")
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

::

    >>> say_my_name(3.1415)
    Traceback (most recent call last):
    TypeError: first_name must be a string

Handling Various Argument Types
===============================

The function ensures that both `first_name` and `last_name`, when provided, are strings:

::

    >>> say_my_name("Alice", "123")
    My name is Alice 123


::

    >>> say_my_name("Bob", "")
    My name is Bob

